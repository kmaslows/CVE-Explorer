package kamil.cve;

import org.apache.logging.log4j.Logger;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;


/**
 * Class responsible for parsing data from CVE entry website.
 * Example: https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-6273
 * @author Kamil Mas³owski
 *
 */
public class EntryParser{
	static Logger log = LogManager.getLogger();

	// Define CSS selectors 
	private static final String css_title = "div.vulnDetail h3";
	private static final String css_overview = "div.vulnDetail h4:matches(^Overview) + p";
	private static final String css_source = "div.vulnDetail div.row:matches(^Source:)";
	private static final String css_original_release = "div.vulnDetail div.row:matches(^Original release date:)";
	private static final String css_last_revised = "div.vulnDetail div.row:matches(^Last revised:)";
	private static final String css_CVSS_score_num = "div.vulnDetail div.row:matches(^CVSS v2 Base Score:) a";
	private static final String css_CVSS_score_vector = "div.vulnDetail div.row:matches(^CVSS v2 Base Score:) a";
	private static final String css_impact_subscore = "div.vulnDetail div.row:matches(^Impact Subscore:)";
	private static final String css_exploitability_subscore = "div.vulnDetail div.row:matches(^Exploitability Subscore:)";
	private static final String css_in_progress = "#BodyPlaceHolder_cplPageContent_plcZones_lt_zoneCenter_VulnerabilityDetail_VulnFormView_VulnShowWarningDiv > p:nth-child(1)";

	public EntryParser(){
		log.info("Entry parser created");
	}

	public Entry parse(Document page) throws CVEParseException{
		try{
			// parse all elements
			Entry entry = new Entry();
			log.info("Parsing title...");
			entry.title = page.select(css_title).text();
			log.info("Parsing title sucesful: " + entry.title);

			log.info("Parsing overview...");
			entry.overview = page.select(css_overview).text();
			log.info("Parsing overview sucesful: " + entry.overview);

			log.info("Parsing source...");
			entry.source = page.select(css_source).first().ownText();
			log.info("Parsing source sucesful: " + entry.source);

			log.info("Parsing original_release...");
			entry.original_release = page.select(css_original_release).first().ownText();
			log.info("Parsing original_release sucesful: " + entry.original_release);

			log.info("Parsing last_revised...");
			entry.last_revised = page.select(css_last_revised).first().ownText();
			log.info("Parsing last_revised sucesful: " + entry.last_revised);

			// check if CVE is still under investigation
			log.info("Checking if CVE is still under investigation...");
			if ( !page.select(css_in_progress).isEmpty() ) {
				// if entry is still under investigation, some data is not available
				log.info("Found 'under investigation string'");
				entry.in_progress = true;
			} else {
				// parse extra data
				log.info("'Under investigation' string not found. Continuing...");
				log.info("Parsing CVSS_score_num...");
				entry.CVSS_score_num = Float.parseFloat(page.select(css_CVSS_score_num).first().ownText());
				log.info("Parsing CVSS_score_num sucesful: " + entry.CVSS_score_num);

				log.info("Parsing css_CVSS_score_vector...");
				entry.CVSS_score_vector = page.select(css_CVSS_score_vector).eq(1).first().ownText();
				log.info("Parsing CVSS_score_str sucesful: " + entry.CVSS_score_vector);

				log.info("Parsing impact_subscore...");
				entry.impact_subscore = Float.parseFloat(page.select(css_impact_subscore).first().ownText());
				log.info("Parsing impact_subscore sucesful: " + entry.last_revised);

				log.info("Parsing exploitability_subscore...");
				entry.exploitability_subscore = Float.parseFloat(page.select(css_exploitability_subscore).first().ownText());
				log.info("Parsing exploitability_subscore sucesful: " + entry.exploitability_subscore);
			}
			return entry;
		}
		catch (Exception e){
			// Rethrow exception as CVEParseException
			throw new CVEParseException(e);
		}
	}
}
