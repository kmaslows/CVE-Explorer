package kamil.cve;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import javax.swing.JFrame;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.IOException;

import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 * Entry class retrieves, parses and displays detailed information about given CVE entry.
 * @author Kamil Mas³owski
 *
 */
public class Entry {
	static Logger log = LogManager.getLogger();
	private static final String url_prefix = "http://web.nvd.nist.gov/view/vuln/detail?vulnId=";

	// Storage elements with default values
	String title = "none";
	String overview = "none";
	String source = "none";
	String original_release = "none";
	String last_revised = "none";
	float CVSS_score_num = -1f;
	String CVSS_score_vector = "none";
	float impact_subscore = -1f;
	float exploitability_subscore = -1f;
	boolean in_progress = false;

	/**
	 * Debug function used to dump Entry data into log file.
	 */
	public void printAll(){
		log.info("Title: " + title);
		log.info("Overview: " + overview);
		log.info("Source: " + source);
		log.info("Original Release: " + original_release);
		log.info("Last Revised: " + last_revised);
		log.info("CVSS Score: " + Float.toString(CVSS_score_num));
		log.info("CVSS info " + CVSS_score_vector);
		log.info("Impact Subscore: " + Float.toString(impact_subscore));
		log.info("Exploitability Subscore: " + Float.toString(exploitability_subscore));
	}

	/**
	 * Function responsible for creating GUI windows displaying all parsed data
	 */
	public void createAndDisplayGUI(){
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				// create all panels
				JFrame jf = new JFrame(title);

				// header elements
				JLabel titleLabel = new JLabel(title);
				JLabel sourceLabel = new JLabel("Source: " + source);
				JLabel originalReleaseLabel = new JLabel("Original release: " + original_release);
				JLabel lastRevisedLabel = new JLabel("Last revised: " + last_revised);

				// center
				JTextArea overviewTextArea = new JTextArea();
				overviewTextArea.setColumns(40);
				overviewTextArea.setLineWrap(true);
				overviewTextArea.setRows(5);
				overviewTextArea.setWrapStyleWord(true);
				overviewTextArea.setEditable(false);
				overviewTextArea.setText(overview);

				// footer elements
				JLabel CVSS_score_num_label = new JLabel("CVSS Score: " + Float.toString(CVSS_score_num) + " " + CVSS_score_vector);

				// place all elements
				jf.setLayout(new GridBagLayout());
				GridBagConstraints c = new GridBagConstraints();

				// place title label
				c.fill = GridBagConstraints.CENTER;
				c.weightx = 0.5;
				c.gridx = 0;
				c.gridy = 0;
				c.gridwidth = 3;
				jf.getContentPane().add(titleLabel, c);
				
				// place source label
				c.fill = GridBagConstraints.HORIZONTAL;
				c.weightx = 0.5;
				c.gridx = 0;
				c.gridy = 1;
				c.gridwidth = 1;
				jf.getContentPane().add(sourceLabel, c);
				
				// place release label
				c.fill = GridBagConstraints.HORIZONTAL;
				c.weightx = 0.5;
				c.gridx = 1;
				c.gridy = 1;
				c.gridwidth = 1;
				jf.getContentPane().add(originalReleaseLabel, c);
				
				
				// place last revised label
				c.fill = GridBagConstraints.HORIZONTAL;
				c.weightx = 0.5;
				c.gridx = 2;
				c.gridy = 1;
				c.gridwidth = 1;
				jf.getContentPane().add(lastRevisedLabel, c);
				
				// place overview text area
				c.fill = GridBagConstraints.HORIZONTAL;
				c.weightx = 0.5;
				c.gridx = 0;
				c.gridy = 2;
				c.gridwidth = 3;
				jf.getContentPane().add(overviewTextArea, c);

				// place CVSS score, if CVE entry is complete
				if (!in_progress){
					c.fill = GridBagConstraints.HORIZONTAL;
					c.weightx = 0.5;
					c.gridx = 0;
					c.gridy = 3;
					c.gridwidth = 3;
					jf.getContentPane().add(CVSS_score_num_label, c);
				}
				
				// pack and display window
				jf.pack();
				jf.setVisible(true);     
			}
		}); 
	}

	/**
	 * Static function responsible for retrieving desired CVE entry and triggering all actions necessary to display it.
	 * Each entry is retrieved and parsed in seperate thread.
	 * @param cveNumber Wanted CVE entry number
	 */
	public static void getAndDisplay(String cveNumber){
		// Spawn new thread for retrieval and parsing of CVE entry
		Thread queryThread = new Thread() {
			public void run() {
				// build full url
				String url = url_prefix+cveNumber;
				try{
					// Get desired website
					Document page = Jsoup.connect(url).timeout(CVEList.TIMEOUT).get();
					// parse retrieved website
					EntryParser parser = new EntryParser();
					Entry entry = parser.parse(page);
					
					// display windows
					entry.createAndDisplayGUI();
				}
				catch (IOException e){
					log.error("Fetching failed for url: " + url + " " + e.getMessage());
					log.error("Connection timed out.");
					JOptionPane.showMessageDialog(new JFrame(), "Connection timed out for: " + url,"Connection timed out", JOptionPane.ERROR_MESSAGE);
				}
				catch (CVEParseException e){
					log.error("Parsing failed for url: " + url + " " + e.getMessage());
					JOptionPane.showMessageDialog(new JFrame(), "Parsing failed for: " + url,"Parsing failed", JOptionPane.ERROR_MESSAGE);
				}
			}
		};
		queryThread.start();

	}
}
